.program ps2
.side_set 2 opt

; An 8n1 UART transmit program.
; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.

; clk = ^^
; dat = ^_
; out -> dat
; in -> dat
; side -> clk, dat (pindir)
; set -> clk data

idleps2:
  set pindirs 0b00

  mov x, status             ; tx fifo < 1
  jmp !x, sendps2           ; if data is in fifo, then send

  jmp pin,idleps2           ; data pin 1, goto next stage 
;  jmp readps2               ; data pin 0, data input pending

readps2:
  set x,10                  ; bit count = 11 for the moment
readps2_bitloop:
  wait 0 pin 0              ; clock goes low
  in pins,2                 ; sample pins
  wait 1 pin 0              ; clock goes high
  jmp x--,readps2_bitloop
  in null 10
;  push
  jmp idleps2


sendps2:
  pull noblock               ; pull data from tx queue
  set pindirs,0b11 side 0b10

  ; hold clk low for a long time
  set y,7
holdclklow:
  set x,15                  ; hold low for 15 cycles of something
holdclklow1:
  jmp x--,holdclklow1 [3]
  jmp y--,holdclklow

  set pindirs,0b11 side 0b00 ; set data to 0, clock to 0, both output
  set pindirs,0b10 side 0b01 ; set data to 0, clock to 1, clock input  - wait for clocks
  wait 0 pin 0              ; wait for clock to go low
                            ; NOTE: if no ps2 connected, then need something external to come to the rescue

  set x,9 ;side 0b10        ; 15 bits - need to trim
bitloop_sendps2:
  wait 0 pin 0              ; clock goes low
  out pins,1                ; output 1 bit to data pin
  wait 1 pin 0              ; clock goes high
  jmp x--,bitloop_sendps2
  out null,22               ; empty output register

  set pindirs,0b00          ; set to input and clock in data ack
  wait 0 pin 0              ; clock goes low
  wait 1 pin 0              ; clock goes high

  jmp idleps2               ; back to idle

% c-sdk {
#include "hardware/clocks.h"

static inline void ps2_program_init(PIO pio, uint sm, uint offset, uint pin_clk) {
    pio_gpio_init(pio, pin_clk);
    pio_gpio_init(pio, pin_clk+1); // data

    pio_sm_config c = ps2_program_get_default_config(offset);

    sm_config_set_set_pins(&c, pin_clk, 2);
    sm_config_set_out_pins(&c, pin_clk+1, 1);
    sm_config_set_in_pins(&c, pin_clk);
    sm_config_set_sideset_pins(&c, pin_clk);
    sm_config_set_jmp_pin(&c, pin_clk+1);

    sm_config_set_out_shift(&c, true, false, 32);
    sm_config_set_in_shift(&c, true, true, 32);

    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 1);

    float div = (float)clock_get_hz(clk_sys) / (1000000);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
